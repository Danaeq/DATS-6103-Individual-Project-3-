import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly
import plotly.plotly as py
import plotly.figure_factory as ff
import plotly.graph_objs as go

import zipfile
import os

from IPython import display
from ipywidgets import interact, widgets
py.sign_in('Danleiq','0B9StCARMXHwyAhideOQ')
plotly.offline.init_notebook_mode()
zipfile.ZipFile('Trasportation Means.zip').extractall('.')
os.listdir('Trasportation Means')[:10]

trans_all = []
for year in range(2006,2017+1):
    trans_all.append(pd.read_csv('Trasportation Means/ACS_{}_1YR_B08006_with_ann.csv'.format(year)))
                                
    trans_all[-1]['year'] = year #append the year column as the last one
 allyears = pd.concat(trans_all)
 
allyears_clean = allyears_class.rename(columns={'Estimate; Total:':'Total','Estimate; Car, truck, or van:':'Car, truck, or van','Estimate; Public transportation (excluding taxicab):':'Public transportation','Estimate; Bicycle':'Bicycle','Estimate; Walked':'Walked','Estimate; Taxicab, motorcycle, or other means':'Taxicab, motorcycle, or other means','Estimate; Worked at home':'Worked at home',
                                                'Estimate; Male:':'Male','Estimate; Male: - Car, truck, or van:':'Male-Car, truck, or van','Estimate; Male: - Public transportation (excluding taxicab):':'Male-Public transportation','Estimate; Male: - Bicycle':'Male-Bicycle','Estimate; Male: - Walked':'Male-Walked','Estimate; Male: - Taxicab, motorcycle, or other means':'Male-Taxicab, motorcycle, or other means','Estimate; Male: - Worked at home':'Male-Worked at home',
                                                'Estimate; Female:':'Female','Estimate; Female: - Car, truck, or van:':'Female-Car, truck, or van','Estimate; Female: - Public transportation (excluding taxicab):':'Female-Public transportation','Estimate; Female: - Bicycle':'Female-Bicycle','Estimate; Female: - Walked':'Female-Walked','Estimate; Female: - Taxicab, motorcycle, or other means':'Female-Taxicab, motorcycle, or other means','Estimate; Female: - Worked at home':'Female-Worked at home'})

allyears_clean.tail()
allyears_index_geo=allyears_clean.set_index(["Geography"], inplace=False)
allyears_index_geo.head()
allyears_sum = allyears_index_geo.loc[['United States'],:]
allyears_sum.head()
